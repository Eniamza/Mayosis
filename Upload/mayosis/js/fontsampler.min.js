/**
 * jquery.editablediv.js
 *
 * Copyright (c) 2015 Phitha Tanpairoj <ptanpairoj@yahoo.com>
 *
 * https://github.com/phitha/editableDiv
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

;(function($) {
	$.fn.editableDiv = function(placeholder) {
		$(this).attr("contenteditable", true);
		$(this).attr("len", $(this).text().trim().length);
		$(this).attr("stage", "");
		if (placeholder != "") $(this).attr("placeholder", placeholder);

		if ($(this).text().trim() == "") {
			$(this).html("<span style='color: #eee;'>"+$(this).attr("placeholder")+"</span>");
			$(this).attr("len", 0);
		} else {
			$(this).attr("len", $(this).text().trim().length);
			$(this).attr("stage", "edit");
		}
		
		$(this)
			.focusin(function() {
				if ($(this).attr("stage") == "") {
					var target = $(this);
					window.setTimeout(function() { target.html(""); }, 10);
				}
			})
			.focusout(function() {
				if ($(this).attr("stage") == "") $(this).html("<span style='color: #ddd;'>"+$(this).attr("placeholder")+"</span>");
			})
			.keydown(function(e) {
				if ($(this).attr("stage") == "" && e.keyCode != 9) {
					if ($(this).attr("len") == 0) { $(this).html(""); $(this).attr("stage", "edit");}
				}
			})
			.keyup(function(e) {
				currentlength = $(this).text().length;
				if (currentlength == 0) $(this).attr("stage", "");
				$(this).attr("len", currentlength);
			});
		
		
		return this;
	}
})(jQuery);

/*
 * FontFace - jQuery Plugin
 * Helps you face up to the battlefield of @font-face challenges
 *
 * Copyright (c) 2010 Craig Sharkie
 *
 * Version: 1.3 (11/11/2010)
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */

;(function($){
 	$.fn.fontface = function(options) {
		var stacks = {
				serif : ", Times New Roman , serif",
				sansserif : ", Helvetica, Arial, sans-serif"
			},
			 defaults = {
				filePath: "/_fonts/",//change this to your font directory location
				fontFamily: "sans-serif",
				fontStack: false,
				fontStretch: "normal",
				fontStyle: "normal",
				fontVariant: "normal",
				fontWeight: "normal"
			},
			options = $.extend(defaults, options);

		options.fontFile = options.filePath;

		if (options.fontStack || options.fontFamily === "sans-serif") {
			if (options.fontStack && options.fontStack.indexOf(", ") === -1) {
				options.fontFamily = options.fontName + stacks[options.fontStack];
			}
			else if (options.fontStack && options.fontStack.indexOf(", ") !== -1) {
				var concat = (options.fontStack.substring(0,2) !== ", ") ? "" + ", ":
				options.fontFamily = options.fontName + concat + options.fontStack;
			}
			else {
				options.fontFamily = options.fontName + stacks.sansserif
			}
		}

		if (typeof options.fontFamily === "object") {
			options.fontFamily = options.fontFamily.join(", ");
		}

		if ($("#jQueryFontFace").length === 0) {//haven't already made one
			$("head").prepend($("<style type=\"text/css\" id=\"jQueryFontFace\"/>"));
		}

		var FF = {
			selector: function (obj) {
				var tag = obj.tagName,
					className = (obj.className) ? "." + obj.className.split(" ").join(".") : "",
					id = ($(obj).attr("id")) ? "#" + $(obj).attr("id") : "";
					
				return tag + id + className;
			},
			create: function (obj) {
				var fontFace = "",
					rule = "",
					fontfamily = options.fontFamily.replace(/\s/g,"").replace(/,/g,""),
					fontfamilyStyleWeight = fontfamily + options.fontStyle + options.fontWeight,
					selector = FF.selector(obj);

				if (!$("#jQueryFontFace").data(fontfamilyStyleWeight)) {
					fontFace = [
						"@font-face {",
							"\tfont-family: \"" + options.fontName + "\";",
							"\tsrc: url('" + options.fontFile + "');",
							"\tsrc: local('â˜º'), url('" + options.fontFile + "') format('woff'), url('" + options.fontFile + "') format('truetype'), url('" + options.fontFile + ".svg#" + fontfamily + "') format('svg');",
							"\tfont-stretch: " + options.fontStretch + ";",
							"\tfont-style: " + options.fontStyle + ";",
							"\tfont-variant: " + options.fontVariant + ";",
							"\tfont-weight: " + options.fontWeight + ";",
						"}"
					].join("\n");
					$("#jQueryFontFace").data(fontfamilyStyleWeight, true);
				}

				if (!$("#jQueryFontFace").data(selector)) {
					rule = [
						selector + " {",
							"\tfont-family: " + FF.quote(options.fontFamily) + " !important;",
						"}"
					].join("\n");
					$("#jQueryFontFace").data(selector, selector);
				}

				return (fontFace.length || rule.length) ? fontFace + "\n" + rule + "\n" : "";
			},
			quote: function (string) {
				var split = string.split(", "),
					length = split.length;
				for (var i = 0; i < length; i += 1) {
					if (split[i].indexOf(" ") !== -1) {
						split[i] = '"' + split[i] + '"';
					}
				}
				return split.join(", ");
			}
		};

		return this.each(function() {
			$("#jQueryFontFace").text($("#jQueryFontFace").text() + FF.create(this));
		});
	};
})(jQuery);